x <- matrix(c(4,3,3,2),2,2)
y <- solve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setSolve <- function(solve) s <<- solve
getSolve <- function() s
list(set = set, get = get,
setSolve = setSolve,
getSolve = getSolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getSolve()
if(!is.null(s)) {
message("getting cached solved matrix")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setSolve(s)
s
}
y <- cacheSolve(x)
y <- cacheSolve(x)
class(x)
make
makeCacheMatrix(x)
y <- cacheSolve(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- $getSolve()
if(!is.null(s)) {
message("getting cached solved matrix")
return(s)
}
data <- x$get()
s <- solve(data, ...)
$setSolve(s)
s
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- $getSolve()
if(!is.null(s)) {
message("getting cached solved matrix")
return(s)
}
data <- x$get()
s <- solve(data, ...)
$setSolve(s)
s
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- $getSolve()
if(!is.null(s)) {
message("getting cached solved matrix")
return(s)
}
data <- $get()
s <- solve(data, ...)
$setSolve(s)
s
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getSolve()
if(!is.null(s)) {
message("getting cached solved matrix")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setSolve(s)
s
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x[[getSolve()]]
if(!is.null(s)) {
message("getting cached solved matrix")
return(s)
}
data <- x[[get()]]
s <- solve(data, ...)
x[[setSolve(s)]]
s
}
y <- cacheSolve(x)
x
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x[getSolve()]
if(!is.null(s)) {
message("getting cached solved matrix")
return(s)
}
data <- x[get()]
s <- solve(data, ...)
x[setSolve(s)]
s
}
y <- cacheSolve(x)
is.recursive(x)
is.atomic(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x["getSolve"]
if(!is.null(s)) {
message("getting cached solved matrix")
return(s)
}
data <- x["get"]
s <- solve(data, ...)
x["setSolve",s]
s
}
y <- cacheSolve(x)
y
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setSolve <- function(solve) s <<- solve
getSolve <- function() s
list(set = set, get = get,
setSolve = setSolve,
getSolve = getSolve)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix(), ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getSolve()
if(!is.null(s)) {
message("getting cached solved matrix")
return(s)
}
matrix <- x$get()
s <- solve(matrix, ...)
x$setSolve(s)
s
}
y <- cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cachesolve <- function(x = matrix(), ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached solved matrix")
return(s)
}
matrix <- x$get()
s <- solve(matrix, ...)
x$setsolve(s)
s
}
y <- cachesolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cachesolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached solved matrix")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
x <- matrix(c(1,3,3,2),2,2)
x
m = makeCacheMatrix(x)
m$get()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached solved matrix")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
cacheSolve (m)
cacheSolve (m)
x <- matrix(c(1,-2,2,1),2,2)
m = makeCacheMatrix(x)
m
cacheSolve (m)
cacheSolve (m)
x <- matrix(c(1,3,3,2),2,2)
m = makeCacheMatrix(x)
cacheSolve (m)
cacheSolve (m)
x <- matrix(c(1,-2,2,1),2,2)
m = makeCacheMatrix(x)
cacheSolve (m)
cacheSolve (m)
